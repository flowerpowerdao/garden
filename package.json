{
  "scripts": {
    "start": "npm run replica && npm run serve",
    "replica": "dfx stop && dfx start --clean --background && npm run deploy",
    "build-power-equalizer": "cd power-equalizer && dfx build staging --check",
    "upgrade:main": "dfx deploy main --argument \"$(cat initArgs.local.did)\"",
    "deploy": "npm run build-power-equalizer && npm run deploy:main && npm run deploy:ledger && npm run deploy:seed && npm run deploy:btcflower && npm run deploy:ethflower && npm run deploy:icpflower && npm run deploy:btcflower_gen2 && npm run mint",
    "deploy:main": "dfx deploy main --argument \"$(cat initArgs.local.did)\" --mode reinstall --yes",
    "deploy:ledger": ". ./set-deploy-env.zsh && dfx deploy ledger --no-wallet --mode reinstall -y --argument '(record {minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"'$WALLET_ADDRESS'\"; record { e8s=100_000_000_000 } }; }; send_whitelist = vec {}})'",
    "deploy:seed": "dfx deploy seed --argument \"$(cat declarations/icrc1/initArgs.did)\" --mode reinstall --yes",
    "deploy:btcflower": "dfx deploy btcflower --argument \"$(cat btcflower-initArgs.did)\" --mode reinstall --yes && dfx canister call btcflower initMint && dfx canister call btcflower shuffleTokensForSale && dfx canister call btcflower airdropTokens && dfx canister call btcflower enableSale",
    "deploy:ethflower": "dfx deploy ethflower --argument \"$(cat ethflower-initArgs.did)\" --mode reinstall --yes && dfx canister call ethflower initMint && dfx canister call ethflower shuffleTokensForSale && dfx canister call ethflower airdropTokens && dfx canister call ethflower enableSale",
    "deploy:icpflower": "dfx deploy icpflower --argument \"$(cat icpflower-initArgs.did)\" --mode reinstall --yes && dfx canister call icpflower initMint && dfx canister call icpflower shuffleTokensForSale && dfx canister call icpflower airdropTokens && dfx canister call icpflower enableSale",
    "deploy:btcflower_gen2": "dfx deploy btcflower_gen2 --argument \"$(cat btcflower_gen2-initArgs.did)\" --mode reinstall --yes && dfx canister call btcflower_gen2 initMint && dfx canister call btcflower_gen2 shuffleTokensForSale && dfx canister call btcflower_gen2 airdropTokens && dfx canister call btcflower_gen2 enableSale",
    "deploy-ic": "dfx deploy main --argument \"$(cat initArgs.ic.did)\" --network ic --identity fpdao --upgrade-unchanged && dfx deploy assets --network ic --identity fpdao",
    "mint": ". ./set-deploy-env.zsh && tsx ./test/mint.ts",
    "serve": "cd frontend && vite --port 3000",
    "build": "cd frontend && vite build",
    "check": "svelte-check --tsconfig ./tsconfig.json",
    "test": "vitest --reporter verbose --bail 1 test/*",
    "postinstall": "cd frontend && npm install"
  },
  "dependencies": {
    "@dfinity/agent": "2.2.0",
    "@dfinity/candid": "2.2.0",
    "@dfinity/identity": "2.2.0",
    "@dfinity/identity-secp256k1": "2.2.0",
    "@dfinity/ledger-icp": "2.6.5",
    "@dfinity/principal": "2.2.0",
    "@dfinity/utils": "2.8.0",
    "@sveltejs/vite-plugin-svelte": "3.0.2",
    "@tsconfig/svelte": "5.0.4",
    "@types/node": "22.10.5",
    "svelte": "4.2.12",
    "svelte-check": "3.6.4",
    "svelte-preprocess": "5.1.3",
    "tailwindcss": "3.4.17",
    "tsx": "4.19.2",
    "typescript": "5.7.2",
    "vite": "5.1.4",
    "vitest": "1.3.1"
  }
}
