{
  "scripts": {
    "start": "npm run replica && npm run serve",
    "replica": "dfx stop && dfx start --clean --background && npm run create-canisters && npm run deploy && npm run mint",
    "build-power-equalizer": "cd power-equalizer && dfx build staging --check",
    "create-canisters": "npm run create:main && npm run create:ledger && npm run create:seed && npm run create:btcflower && npm run create:ethflower && npm run create:icpflower",
    "create:main": "dfx canister create main --specified-id 2222s-4iaaa-aaaaf-ax2uq-cai",
    "create:ledger": "dfx canister create ledger --specified-id ryjl3-tyaaa-aaaaa-aaaba-cai",
    "create:seed": "dfx canister create seed --specified-id zzzzp-iiaaa-aaaaf-a5hga-cai",
    "create:btcflower": "dfx canister create btcflower --specified-id pk6rk-6aaaa-aaaae-qaazq-cai",
    "create:ethflower": "dfx canister create ethflower --specified-id dhiaa-ryaaa-aaaae-qabva-cai",
    "create:icpflower": "dfx canister create icpflower --specified-id 4ggk4-mqaaa-aaaae-qad6q-cai",
    "deploy": "npm run build-power-equalizer && npm run deploy:main && npm run deploy:ledger && npm run deploy:seed && npm run deploy:btcflower && npm run deploy:ethflower && npm run deploy:icpflower",
    "deploy:main": "dfx deploy main --argument \"$(cat initArgs.local.did)\" --mode reinstall --yes",
    "deploy:ledger": ". ./set-deploy-env.zsh && dfx deploy ledger --no-wallet --mode reinstall -y --argument '(record {minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"'$WALLET_ADDRESS'\"; record { e8s=100_000_000_000 } }; }; send_whitelist = vec {}})'",
    "deploy:seed": "dfx deploy seed --argument \"$(cat declarations/icrc1/initArgs.did)\" --mode reinstall --yes",
    "deploy:btcflower": "dfx deploy btcflower --argument \"$(cat btcflower-initArgs.did)\" --mode reinstall --yes && dfx canister call btcflower initMint && dfx canister call btcflower shuffleTokensForSale && dfx canister call btcflower airdropTokens && dfx canister call btcflower enableSale",
    "deploy:ethflower": "dfx deploy ethflower --argument \"$(cat ethflower-initArgs.did)\" --mode reinstall --yes && dfx canister call ethflower initMint && dfx canister call ethflower shuffleTokensForSale && dfx canister call ethflower airdropTokens && dfx canister call ethflower enableSale",
    "deploy:icpflower": "dfx deploy icpflower --argument \"$(cat icpflower-initArgs.did)\" --mode reinstall --yes && dfx canister call icpflower initMint && dfx canister call icpflower shuffleTokensForSale && dfx canister call icpflower airdropTokens && dfx canister call icpflower enableSale",
    "deploy-ic": "dfx deploy main --argument \"$(cat initArgs.ic.did)\" --network ic",
    "mint": ". ./set-deploy-env.zsh && tsx ./test/mint.ts",
    "serve": "cd frontend && vite --port 3000",
    "build": "cd frontend && vite build",
    "check": "svelte-check --tsconfig ./tsconfig.json",
    "test": "vitest --threads false --reporter verbose --bail 1 test/*",
    "postinstall": "cd frontend && npm install"
  },
  "dependencies": {
    "@dfinity/agent": "^0.18.1",
    "@dfinity/candid": "^0.18.1",
    "@dfinity/identity": "^0.18.1",
    "@dfinity/identity-secp256k1": "^0.18.1",
    "@dfinity/nns": "^0.16.3",
    "@dfinity/principal": "^0.18.1",
    "@dfinity/utils": "^0.0.18",
    "@sveltejs/vite-plugin-svelte": "^2.4.3",
    "@tsconfig/svelte": "^5.0.0",
    "@types/node": "^20.4.4",
    "ic-stoic-identity": "^2.0.0",
    "svelte": "^4.1.1",
    "svelte-check": "^3.4.6",
    "svelte-preprocess": "^5.0.4",
    "tailwindcss": "^3.3.3",
    "tsx": "^3.12.7",
    "typescript": "^5.1.6",
    "vite": "^4.4.6",
    "vitest": "^0.33.0"
  },
  "overrides": {
    "@dfinity/candid": "^0.18.1",
    "@dfinity/principal": "^0.18.1",
    "@dfinity/agent": "^0.18.1"
  }
}
